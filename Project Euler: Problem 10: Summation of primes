function primeSummation(n) {
  // Good luck!
  //base case 
  let vecOfPrimes = [2]
  let total = 0

 

//helper function that will test is the number we are looking at prime?  
function isPrime(arr, number){

// .every is used to make sure a condition is satisfied for EVERY element in an
//array
  var result = arr.every(function (e) {
    return number % e 
});

//if it is true then push the element into the array 
if (result == true){
  arr.push(number)
}


}

//use recursion to run the helper function repeatedly to get the nth
//prime number up to the 10001st prime number
for(let i = 3; vecOfPrimes.length < 20000; i++){
isPrime(vecOfPrimes, i)

}

function isSmallEnough(value) {
  return value < n;
}

var filtered = vecOfPrimes.filter(isSmallEnough);

for(let i =0; i < filtered.length ; i ++){
  total += filtered[i]
}


  return total;
}

//This is a correct solution but freecode camp does not like computing large numbers
//like the last requirement
console.log(primeSummation(17));
console.log(primeSummation(2001));
console.log(primeSummation(140759));
console.log(primeSummation(2000000));
